"use strict";System.register(["react","./input/text","./input/select","./input/select-multi","./panel-code","../lib/list","../lib/string","lib/config"],function(_export,_context){"use strict";var React,TextInput,TextArea,AutoComplete,Select,SelectMulti,PanelCode,findByProperty,id,CONFIG,_createClass,MOD_TEXT,PanelWeaponEdit;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i]}return arr2}else{return Array.from(arr)}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}return{setters:[function(_react){React=_react.default},function(_inputText){TextInput=_inputText.TextInput;TextArea=_inputText.TextArea;AutoComplete=_inputText.AutoComplete},function(_inputSelect){Select=_inputSelect.default},function(_inputSelectMulti){SelectMulti=_inputSelectMulti.default},function(_panelCode){PanelCode=_panelCode.default},function(_libList){findByProperty=_libList.findByProperty},function(_libString){id=_libString.id},function(_libConfig){CONFIG=_libConfig}],execute:function(){_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();MOD_TEXT=" (Mod)";PanelWeaponEdit=function(_React$Component){_inherits(PanelWeaponEdit,_React$Component);function PanelWeaponEdit(props){_classCallCheck(this,PanelWeaponEdit);var _this=_possibleConstructorReturn(this,(PanelWeaponEdit.__proto__||Object.getPrototypeOf(PanelWeaponEdit)).call(this,props));var initialState={selected:null,id:"",name:"",skill:"",range:"",damage:"",critical:"",qualities:[],notes:"",isNew:false};// set form state from initial editing prop, if available
if(_this.props.editing){initialState.id=_this.props.editing.id;initialState.name=_this.props.editing.name;initialState.skill=_this.props.editing.skill;initialState.range=_this.props.editing.range;initialState.damage=_this.props.editing.damage;initialState.critical=_this.props.editing.critical;initialState.qualities=_this.props.editing.qualities||[];initialState.notes=_this.props.editing.notes}_this.state=initialState;_this.ranges=["","Engaged","Short","Medium","Long","Extreme"];_this.skills=[""].concat(_toConsumableArray(_this.props.skills.map(function(s){return s.name})));return _this}_createClass(PanelWeaponEdit,[{key:"componentWillUpdate",value:function componentWillUpdate(nextProps,nextState){if(nextProps.editing!==this.props.editing){var newState={id:"",name:"",skill:"",range:"",damage:"",critical:"",qualities:[],notes:""};if(nextProps.editing&&"name"in nextProps.editing){newState.id=this.props.editing.id;newState.name=this.props.editing.name;newState.skill=this.props.editing.skill;newState.range=this.props.editing.range;newState.damage=this.props.editing.damage;newState.critical=this.props.editing.critical;newState.qualities=this.props.editing.qualities||[];newState.notes=this.props.editing.notes}this.setState(newState)}}},{key:"setName",value:function setName(val){this.setState({name:val,isNew:!(!val||!this.state.skill||!this.state.range||!this.state.damage)})}},{key:"setSkill",value:function setSkill(val){this.setState({skill:val,isNew:!(!this.state.name||!val||!this.state.range||!this.state.damage)})}},{key:"setRange",value:function setRange(val){this.setState({range:val,isNew:!(!this.state.name||!this.state.skill||!val||!this.state.damage)})}},{key:"setDamage",value:function setDamage(val){this.setState({damage:val,isNew:!(!this.state.name||!this.state.skill||!this.state.range||!val)})}},{key:"setValue",value:function setValue(attr){var _this2=this;return function(val){var _this2$setState;_this2.setState((_this2$setState={},_defineProperty(_this2$setState,attr,val),_defineProperty(_this2$setState,"isNew",!(!_this2.state.name||!_this2.state.skill||!_this2.state.range||!_this2.state.damage)),_this2$setState))}}},{key:"setQualities",value:function setQualities(val){val=val.replace(MOD_TEXT,"");var qualities=this.state.qualities;if(qualities.indexOf(val)==-1){qualities.push(val)}else{qualities.splice(qualities.indexOf(val),1)}this.setState({qualities:qualities,isNew:!(!this.state.name||!this.state.skill||!this.state.range||!this.state.damage)})}},{key:"selectItem",value:function selectItem(name){var item=this.props.list.find(findByProperty("name",name));this.setState({selected:item})}},{key:"add",value:function add(){var selected=this.state.selected;if(selected&&this.props.handler){this.props.handler(selected.name)}this.setState({selected:""})}},{key:"create",value:function create(){var weapon={id:this.state.id||CONFIG.ADVERSARY_ID+id(this.state.name),name:this.state.name,skill:this.state.skill,range:this.state.range,damage:this.state.damage,critical:this.state.critical,qualities:this.state.qualities.map(function(q){return q.replace(MOD_TEXT,"")})};if(this.state.notes){weapon.notes=this.state.notes}if(this.props.handler){this.props.handler(weapon)}if(this.props.close){this.props.close()}this.setState({id:"",name:"",skill:"",range:"",damage:"",critical:"",qualities:[],notes:"",isNew:false})}},{key:"addMod",value:function addMod(list){return list.map(function(q){return q.type=="Mod"?q.name+MOD_TEXT:q.name}).sort()}},{key:"render",value:function render(){var _this3=this;// TODO ux needs to change to allow adding of rank to some qualities
// TODO probably best to have a separate panel for mods
var list=this.props.list.map(function(i){return i.name});var selected=this.state.selected?this.state.selected.name:"";var qualities=this.addMod(this.props.qualities.filter(function(f){return!f.ranked}));var selectedQualities=this.addMod(this.props.qualities.filter(function(f){return _this3.state.qualities.indexOf(f.name)!=-1}));var title=this.props.editing?"Edit":"Create";var button=this.props.editing?"Save":"Add New";var form=React.createElement("div",null,React.createElement("h3",null,title," Weapon"),React.createElement(TextInput,{label:"Name",value:this.state.name,handler:this.setName.bind(this),required:true}),React.createElement(Select,{label:"Skill",value:this.state.skill,values:this.skills,handler:this.setSkill.bind(this),required:true}),React.createElement(Select,{label:"Range",value:this.state.range,values:this.ranges,handler:this.setRange.bind(this),required:true}),React.createElement(TextInput,{label:"Damage",value:this.state.damage,handler:this.setDamage.bind(this),required:true,note:"Remember to add Brawn to damage for Melee or Brawl weapons."}),React.createElement(TextInput,{label:"Critical",value:this.state.critical,handler:this.setValue("critical").bind(this)}),React.createElement(SelectMulti,{label:"Qualities",value:selectedQualities,values:qualities,handler:this.setQualities.bind(this)}),React.createElement(TextArea,{label:"Notes",value:this.state.notes,handler:this.setValue("notes").bind(this)}),React.createElement(PanelCode,null),React.createElement("button",{className:"btn-full",disabled:!this.state.isNew,onClick:this.create.bind(this)},button," Weapon"));return React.createElement("div",null,this.props.editing?form:React.createElement("div",null,React.createElement("h3",null,"Select Weapon"),React.createElement(AutoComplete,{label:"Weapon",value:selected,values:list,handler:this.selectItem.bind(this),required:true}),React.createElement("button",{className:"btn-full",disabled:!this.state.selected,onClick:this.add.bind(this)},"Add Selected Weapon"),React.createElement("div",{className:"divider"},React.createElement("span",null,"OR")),form))}}]);return PanelWeaponEdit}(React.Component);_export("default",PanelWeaponEdit)}}});